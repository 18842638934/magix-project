define("app/views/mixins/shake",["magix","../../mixins/shake"],function(i,e,t){var n=i("magix"),a=i("../../mixins/shake");t.exports=n.View.extend({tmpl:{html:'<h3>震动mixin</h3><p>发一个好玩的mixin</p><div mx-guid="g0" id="content_<%=$$.viewId%>"><ol><li>1. 搭积木式开发（一个展现区块可以很方便的拆分成几个小的区块，同时拆分后的小区块仍然可以再拆分，通过mx-view属性快速的把拆分后的区块组装起来）</li><li>2. 便捷的事件绑定（只要在方法名后跟上事件类型，magix就会在合适的时候帮你绑定、解绑事件，开发者不需要做任何事情）</li><li>3. 有效的隔离机制（不论是事件绑定还是样式书写，magix均可保证这些只对当前区块有效，这在区块嵌套的情况下非常有用，完全不用担心误伤子区块）</li><li>4. 统一的接口管理（magix提供的service可以方便的管理项目中所有的接口，同时您可以自由的组合这些接口进行数据请求，完全不用担心后端开发人员把接口拆分的过细）</li><li>5. 强大的扩展（magix提供对整个项目的统一扩展或针对当前区块的mixin增强，让您在复用功能、后期统一处理变得得心应手）</li><li>6. 轻量的数据绑定（magix内置了非常轻量的局部刷新和数据绑定功能，在保证开发便利的情况下，遇到问题debug起来也会非常容易）</li><li>7. 离线处理（magix配合magix-combine工具，在上线前针对项目中的代码做离线处理，把一些结果提前计算好，减少线上计算，提升应用的性能）</li></ol></div><button type="button" class="pabcdf0-btn pabcdf0-046" mx-click="shake()">震动内容</button>',subs:[{keys:["viewId"],path:'div[mx-guid="g0"]',attr:'id="content_<%=$$.viewId%>"',attrs:[{n:"id",p:1}]}]},mixins:[a],render:function(){var i=this;i.updater.digest({viewId:i.id})},"shake<click>":function(){this.shakeNode("#content_"+this.id)}})});