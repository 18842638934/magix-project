define("app/views/coms/copy",["magix","../../mixins/gtip"],function(i,t,e){var s=i("magix");s.applyStyle("p81",".p81-e75{width:900px}");var l=i("../../mixins/gtip");e.exports=s.View.extend({tmpl:{html:'<h3>复制组件</h3><h4>配置</h4><table class="p3a-c06 p3a-042 p81-e75"><thead><tr><th>参数名称</th><th>参数类型</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>node</td><td>string</td><td>要复制文本的节点</td><td></td></tr></tbody></table><h4 class="p16-716">事件</h4><h5>success</h5><h5>error</h5><h4 class="p16-716">演示</h4><div id="test"><ol><li>1. 搭积木式开发（一个展现区块可以很方便的拆分成几个小的区块，同时拆分后的小区块仍然可以再拆分，通过mx-view属性快速的把拆分后的区块组装起来）</li><li>2. 便捷的事件绑定（只要在方法名后跟上事件类型，magix就会在合适的时候帮你绑定、解绑事件，开发者不需要做任何事情）</li><li>3. 有效的隔离机制（不论是事件绑定还是样式书写，magix均可保证这些只对当前区块有效，这在区块嵌套的情况下非常有用，完全不用担心误伤子区块）</li><li>4. 统一的接口管理（magix提供的service可以方便的管理项目中所有的接口，同时您可以自由的组合这些接口进行数据请求，完全不用担心后端开发人员把接口拆分的过细）</li><li>5. 强大的扩展（magix提供对整个项目的统一扩展或针对当前区块的mixin增强，让您在复用功能、后期统一处理变得得心应手）</li><li>6. 轻量的数据绑定（magix内置了非常轻量的局部刷新和数据绑定功能，在保证开发便利的情况下，遇到问题debug起来也会非常容易）</li><li>7. 离线处理（magix配合magix-combine工具，在上线前针对项目中的代码做离线处理，把一些结果提前计算好，减少线上计算，提升应用的性能）</li></ol></div><button class="pf0-btn pf0-046" mx-view="app/gallery/mx-clipboard/index?node=%23test" mx-success="copy()">复制</button>',subs:[]},mixins:[l],render:function(){this.updater.digest()},"copy<success>":function(){this.gtipRT("复制成功，可以粘贴了～")}})});