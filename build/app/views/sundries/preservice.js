define("app/views/sundries/preservice",["magix","../../services/service"],function(i,e,l){var s=i("magix");s.applyStyle("p05",".p05-e75{width:900px}");var t=i("../../services/service");l.exports=s.View.extend({tmpl:{html:'<h3>数据请求的流程控制处理</h3><p class="p05-e75">请求的流程控制一般有以下几种情况：<ul><li>1. 用户长时间不操作，已处于登出状态</li><li>2. 频繁的操作，后端对api的请求限制，为了防止是机器操作，弹出输入验证码继续的操作</li><li>3. 单独的token获取接口，在其它接口发送数据前，都需要先访问这个接口拿一个token，然后其它接口要带上这个token</li></ul>为了打造更好的用户体验，尤其是单页应用，我们最好不要打断用户的操作流程。<br/>以弹出验证码继续这个需求为例，我们来分析一下。<ul><li>1. 用户在浏览或保存一个表单，有请求发送</li><li>2. 服务端认为请求的接口过于频繁，可能是机器，在接口返回中表明需要验证用户</li><li>3. 前端弹出验证码界面</li><li>4. 服务端验证通过，当前是普通用户，并不是机器</li><li>5. 前端对刚才的接口继续请求展示界面或保存数据</li></ul></p><p class="p05-e75 p16-716">就是普通请求在客户端与服务端交换数据的过程中，加入其它的流程处理（登录、弹验证码），当其它的流程处理结束后，原请求继续处理。</p><div class="p16-28f"><button class="pf0-btn pf0-046" mx-click="preservice()">请求接口，需要登录，请观察console</button></div>',subs:[]},mixins:[t],render:function(){this.updater.digest()},"preservice<click>":function(i){this.fetch([{name:"list1",ctrl:"login1"},{name:"list1",ctrl:"login2"}],function(i,e,l){console.log("获取到数据",i,e,l)})}})});